- name: Connect to Pulumi created EC2 instance and install app and make it a NAT router
  hosts: all
  gather_facts: no
  remote_user: ubuntu
  become: yes

  tasks:
    - name: AWS region from Pulumi
      shell: pulumi config get aws:region
      register: pulumi_aws_region
      delegate_to: "localhost"
      become: no

    - name: AWS account id
      shell: pulumi stack output aws_account_id
      register: pulumi_aws_account_id
      delegate_to: "localhost"
      become: no

    - set_fact:
        aws_region: "{{ pulumi_aws_region.stdout }}"
        aws_account_id: "{{ pulumi_aws_account_id.stdout }}"
        apps_root: /data/apps/
        runtime_user: ubuntu
        runtime_user_group: ubuntu
        http_user_password: "'{{ lookup('ansible.builtin.env', 'GATEWAY_HTTP_PASSWORD') }}'"
        ecr_repository: demo

    - set_fact:
        ecr_uri: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com"

    - name: Update all packages to their latest version
      apt:
        name: "*"
        state: latest
        update_cache: yes
  
    - name: Installing packages
      apt:
        pkg:
        - awscli
        - python3-pip
        - python3-apt # needed by ansible's apt command to install .deb urls. i.e. cloudwatch agent
        - docker.io # this is removed after the build
        - iptables-persistent

    - name: Kernel routing
      lineinfile:
        state: present
        path: /etc/sysctl.conf
        line: "net.ipv4.ip_forward=1"

    - name: Reload sysctl for kernel routing
      shell: "/usr/sbin/sysctl --system"

    - name: Kernel NAT
      shell: "/usr/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 192.168.2.0/24 -j MASQUERADE"

    - name: Stop docker from blocking forwarding as this is also a router
      shell: "iptables -P FORWARD ACCEPT"

    - name: Save Kernel NAT
      shell: "/usr/sbin/iptables-save -c > /etc/iptables/rules.v4"

    - name: Apps directory
      file:
        path: "{{ apps_root }}"
        state: directory
        mode: '0755'
        owner: "{{ runtime_user }}"
        group: "{{ runtime_user_group }}"

    - name: Copy apps
      ansible.builtin.copy:
        src: "apps/"
        dest: "{{ apps_root }}"
        owner: "{{ runtime_user }}"
        group: "{{ runtime_user_group }}"
        mode: 0755

    - name: Install pipenv globally from pypi not Ubuntu
      ansible.builtin.pip:
        name:
          - pipenv

    - name: Run a pipenv install
      environment:
        LANG: "en_GB.UTF-8"
      command: "/usr/local/bin/pipenv install"
      args:
        chdir: "{{ apps_root }}fossa_gateway"

    - name: systemd service file
      template:
        src: templates/systemd.service
        dest: "/etc/systemd/system/fossa_gateway.service"
        owner: root
        group: root
        mode: 0644
      vars:
        app_name: 'fossa_gateway'
        display_name: 'Fossa Gateway'
        execute_as: root
        app_path: "{{ apps_root }}fossa_gateway"
        working_dir: "{{ apps_root }}fossa_gateway"
        python_path: "{{ apps_root }}fossa_gateway"
        http_user_password: "{{http_user_password}}"

    - name: Enable and start systemd service
      shell: "/usr/bin/systemctl enable fossa_gateway.service; /usr/bin/systemctl start fossa_gateway.service"

    - name: Docker build worker image
      shell: "cd {{ apps_root }}/fossa_worker; /usr/bin/docker build -t fossa-worker ."

    - name: Docker tag for ECR
      shell: "cd {{ apps_root }}/fossa_worker; /usr/bin/docker tag fossa-worker:latest {{ ecr_uri }}/{{ ecr_repository }}:fossa-worker"
     
    - name: Fetch ECR authentication
      shell: "/usr/bin/aws ecr get-login-password --region {{ aws_region }} | /usr/bin/docker login --username AWS --password-stdin {{ ecr_uri }}"

    - name: Docker image push
      shell: "/usr/bin/docker push {{ ecr_uri }}/{{ ecr_repository }}:fossa-worker"
